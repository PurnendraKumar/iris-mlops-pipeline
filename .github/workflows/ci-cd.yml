name: Build Iris Mlops Pipeline Docker Image

on:
  push:
    branches: [ main]
#   pull_request:
#     branches: [ main ]

env:
  DOCKER_IMAGE: purnendrakumar/iris-mlops-pipeline
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 src/ --max-line-length=100 --ignore=E203,W503
    
    - name: Format with black
      run: |
        black --check src/
    
    #- name: Run tests
      # run: |
        # pytest tests/ -v --tb=short
    
    - name: Generate test data and train model
      run: |
        python src/data_preprocessing.py
        python src/model_training.py
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4S
      with:
        name: models
        path: models/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: models
        path: models/
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        chmod +x deploy.sh
        ./deploy.sh staging
    
    - name: Run health check
      run: |
        sleep 30  # Wait for deployment
        curl -f http://localhost:8000/health || exit 1
